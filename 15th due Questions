Question1:Balance Array
roblem Description

Given an integer array A of size N. You need to count the number of special elements in the given array.

A element is special if removal of that element make the array balanced.

Array will be balanced if sum of even index element equal to sum of odd index element.



Problem Constraints
1 <= N <= 105

1 <= A[i] <= 109



Input Format
First and only argument is an integer array A of size N.



Output Format
Return an integer denoting the count of special elements.



Example Input
Input 1:

 A = [2, 1, 6, 4]
Input 2:

 A = [5, 5, 2, 5, 8]


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 After deleting 1 from array : {2,6,4}
    (2+4) = (6)
 Hence 1 is the only special element, so count is 1
Explanation 2:

 If we delete A[0] or A[1] , array will be balanced
    (5+5) = (2+8)
 So A[0] and A[1] are special elements, so count is 2.
 
 Program:
 public class Solution{
    public int solve(int[] A){
        int n = A.length;
        int[] ps = new int[n];
        int[] pseven = new int[n];
        int[] psodd = new int[n];
        ps[0] = A[0]; 
    int evensum=0,oddsum=0;
        int j=1;
        for(int i=0;i<n;i++){
            if(i%2==0){
                evensum+=A[i];
            }
        else{
        oddsum+=A[i];
            }
        pseven[i] = evensum;
        psodd[i]=oddsum;
        }
        int ans =0;
        int totaleven=0;
        int totalodd=0;
        for(int i=0;i<n;i++){
                if(i==0){
                    totalodd = pseven[n-1]-pseven[0];
                    totaleven= psodd[n-1];
                }
                else{
                    totaleven = pseven[i-1]+(psodd[n-1]-psodd[i]);
                    totalodd = psodd[i-1]+(pseven[n-1]-pseven[i]);
                }
                
                if(totaleven==totalodd){
                    ans++;
                } 
            }
        
        return ans;
    }
    
    
 Question2:Pick from both sides!
 Given an integer array A of size N.

You have to pick exactly B elements from either left or right end of the array A to get the maximum sum.

Find and return this maximum possible sum.

NOTE: Suppose B = 4 and array A contains 10 elements then

You can pick the first four elements or can pick the last four elements or can pick 1 from the front and 3 from the back etc. you need to return the maximum possible sum of elements you can pick.


Problem Constraints
1 <= N <= 105

1 <= B <= N

-103 <= A[i] <= 103



Input Format
First argument is an integer array A.

Second argument is an integer B.



Output Format
Return an integer denoting the maximum possible sum of elements you picked.



Example Input
Input 1:

 A = [5, -2, 3 , 1, 2]
 B = 3
Input 2:

 A = [1, 2]
 B = 1


Example Output
Output 1:

 8
Output 2:

 2


Example Explanation
Explanation 1:

 Pick element 5 from front and element (1, 2) from back so we get 5 + 1 + 2 = 8
Explanation 2:

 Pick element 2 from end as this is the maximum we can get
 
 
 
 Program:
 public class Solution {
    public int solve(int[] A, int B) {
        int n =A.length;
        int max =  Integer.MIN_VALUE;
        int l = B-1;
        int r = n-1;
        int sumLeft = 0;
        int sumRight = 0;
        
        for(int i=0;i<B;i++){
            sumLeft = sumLeft+A[i];
        }
        max = Math.max(sumLeft,max);
        
        while(l>=0){
            sumLeft = sumLeft-A[l];
            sumRight = sumRight+A[r];
            int totalSum = sumLeft+sumRight;
            max = Math.max(max,totalSum);
            l--;
            r--;
        }
        return max;
    }
    
 Question3:Minimum Operations to Make Array Equal

You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n).

In one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.

 

Example 1:

Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].
Example 2:

Input: n = 6
Output: 9
 

Constraints:

1 <= n <= 104

Program:
class Solution {
    public int minOperations(int n) {
        int mid = n/2;
        return mid*(mid+n%2);
    }
}

Question4:Range Sum Query - Immutable

Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= left <= right < nums.length
At most 104 calls will be made to sumRange.

Program:
class NumArray {
    int num[];
    public NumArray(int[] nums) {
        
       num = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            num[i]=nums[i];
        }
    }
    
    public int sumRange(int left, int right) {
        int sum=0;
        for(int i=left;i<=right;i++){
            sum+=num[i];
        }
        return sum;
    }
}

Question5:Equilibrium Point

Given an array A of n positive numbers. The task is to find the first Equilibrium Point in an array. 
Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Note: Retun the index of Equilibrium point. (1-based index)

Example 1:

Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 
 

Example 2:

Input:
n = 1
A[] = {1}
Output: 1
Explanation:
Since its the only element hence
its the only equilibrium point.
 

Your Task:
The task is to complete the function equilibriumPoint() which takes the array and n as input parameters and returns the point of equilibrium. Return -1 if no such point exists.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 106
1 <= A[i] <= 108

Program:


class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    // static int pf(int n){
    //     int sum=0;
    //     if(n==0){
    //         return sum;
    //     }
    //     return pf(n)+pf(n-1);
    // }
    
    public static int equilibriumPoint(long arr[], int n) {

        // Your code here
        long[] pf = new long[n];
        pf[0] = arr[0];
        for(int i=1;i<n;i++){
            pf[i]=pf[i-1]+arr[i];
        }
        if(arr.length==1){
            return 1;
        }
        else{
            for(int i=1;i<n-1;i++){
                if( pf[i-1]==(pf[n-1]-pf[i]) ){
                    return i+1;
                }
            }    
        }
        
        return -1;
    }
    
}

Question6:
Product of Array Except Self


Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

Program:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] output = new int[nums.length];
        if(n<1){
            return output;
        }
        int product = 1;

        for(int i=0;i<n;i++){
            product*=nums[i];
            output[i] = product;
        }
        product = 1;
        for(int i=n-1;i>0;i--){
            output[i] =output[i-1]*product;
            product*=nums[i];
        }
        output[0] = product;
        return output;
    }
}


